// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                String       @id @default(cuid())
  name              String
  email             String   @unique
  image             String?
  storageUsed       Int      @default(0) // Storage in bytes
  storagePlan       Plan   @default(FREE)
  photos            Photo[]                       
  events            Event[]     
  createdAt         DateTime    @default(now())
  
}

model Event {
  id          String   @id @default(cuid())  // Unique identifier for each event
  name        String                         // Name of the event (e.g., Wedding, Trip)
  type        String
  description String?
  userId      String                         // The user who created the event
  user        User    @relation(fields: [userId], references: [id])
  photos      Photo[]           
  cover     String?  @default("https://tasvirai-storages.blr1.cdn.digitaloceanspaces.com/Screenshot%202024-09-28%20at%2012.53.10%E2%80%AFAM.png")        
  createdAt   DateTime @default(now())
}

model Photo {
  id           String   @id @default(uuid())  // Unique identifier for each photo
  url          String                         // URL where the photo is stored
  faceData     String[]                       // Array of face data or face IDs (multiple people in one photo)
  uploadedAt   DateTime @default(now())        // Timestamp when the photo was uploaded
  eventId      String?                         // Optional event reference
  event        Event?   @relation(fields: [eventId], references: [id])
  userId       String                          // The user who uploaded the photo
  user         User    @relation(fields: [userId], references: [id])
 // sharedLinks  SharedLink[]                    // One-to-many relationship with shared links (QR codes, URLs)
}

// model SharedLink {
//   id        String   @id @default(uuid())  // Unique identifier for each shared link
//   linkType  LinkType                      
//   link      String                        // The actual QR code data or direct link
//   photoId   String                        // The photo that this link shares
//   photo     Photo    @relation(fields: [photoId], references: [id])
//   createdAt DateTime @default(now())       // Timestamp when the link was created
// }


enum Plan {
  FREE
  STANDARD
  PREMIUM

}
